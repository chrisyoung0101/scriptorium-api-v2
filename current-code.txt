--- CorsConfig.java (/Users/chrisyoung/IdeaProjects/scriptorium-api-v2/src/main/java/com/example/scriptoriumapiv2/config/CorsConfig.java) ---
package com.example.scriptoriumapiv2.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class CorsConfig {

    @Bean
    public WebMvcConfigurer corsConfigurer() {
        return new WebMvcConfigurer() {
            @Override
            public void addCorsMappings(CorsRegistry registry) {
                registry.addMapping("/**")
                        .allowedOrigins("http://localhost:5173") // Vite default port
                        .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
                        .allowedHeaders("*");
            }
        };
    }
}



--- SecurityConfig.java (/Users/chrisyoung/IdeaProjects/scriptorium-api-v2/src/main/java/com/example/scriptoriumapiv2/config/SecurityConfig.java) ---
package com.example.scriptoriumapiv2.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
                .authorizeHttpRequests(auth -> auth
                        .anyRequest().permitAll()
                )
                .csrf(csrf -> csrf.disable());  // Disable CSRF using lambda

        return http.build();
    }
}


--- DocumentController.java (/Users/chrisyoung/IdeaProjects/scriptorium-api-v2/src/main/java/com/example/scriptoriumapiv2/controller/DocumentController.java) ---
package com.example.scriptoriumapiv2.controller;

import com.example.scriptoriumapiv2.model.Document;
import com.example.scriptoriumapiv2.repository.DocumentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/documents")
public class DocumentController {

    @Autowired
    private DocumentRepository documentRepository;

    // GET /api/documents - List all documents
    @GetMapping
    public List<Document> getAllDocuments() {
        return documentRepository.findAll();
    }

    // POST /api/documents - Add a new document
    @PostMapping
    public Document createDocument(@RequestBody Document document) {
        return documentRepository.save(document);
    }
}


--- Document.java (/Users/chrisyoung/IdeaProjects/scriptorium-api-v2/src/main/java/com/example/scriptoriumapiv2/model/Document.java) ---
package com.example.scriptoriumapiv2.model;

import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDate;
import java.time.LocalDateTime;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Document {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String title;
    private String author;

    @Lob  // For large text content
    @Column(columnDefinition = "TEXT")
    private String content;

    private String summary;
    private String category;

    private LocalDate publishedAt;

    @CreationTimestamp
    private LocalDateTime createdAt;

    @UpdateTimestamp
    private LocalDateTime updatedAt;
}


--- DocumentRepository.java (/Users/chrisyoung/IdeaProjects/scriptorium-api-v2/src/main/java/com/example/scriptoriumapiv2/repository/DocumentRepository.java) ---
package com.example.scriptoriumapiv2.repository;

import com.example.scriptoriumapiv2.model.Document;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface DocumentRepository extends JpaRepository<Document, Long> {
    // Inherits CRUD methods (findAll, save, delete, etc.)
}


--- ScriptoriumApiV2Application.java (/Users/chrisyoung/IdeaProjects/scriptorium-api-v2/src/main/java/com/example/scriptoriumapiv2/ScriptoriumApiV2Application.java) ---
package com.example.scriptoriumapiv2;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ScriptoriumApiV2Application {

    public static void main(String[] args) {
        SpringApplication.run(ScriptoriumApiV2Application.class, args);
    }

}


--- application.yaml (/Users/chrisyoung/IdeaProjects/scriptorium-api-v2/src/main/resources/application.yaml) ---
server:
  port: 8080

spring:
  datasource:
    hikari:
      maximum-pool-size: 5
      minimum-idle: 2
      idle-timeout: 10000
      max-lifetime: 30000
    url: jdbc:postgresql://dpg-cu7bvg5svqrc7397mv50-a.singapore-postgres.render.com:5432/scriptorium_db
    username: scriptorium_db_user
#    password: ${DB_PASSWORD}
    password: 9y90F3y852WQefuSKQhuW0ZQbVBIeY8Q
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: update  # Creates/Updates tables automatically
    show-sql: true      # Logs SQL statements
    open-in-view: false  # This allows lazy loading during view rendering but can lead to N+1 query issues.



# Optional: Enable logging for easier debugging
logging:
  level:
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE


